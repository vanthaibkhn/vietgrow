import fs from "fs";
import path from "path";
import { db } from "../../lib/firebase.js"; // Firestore n·∫øu USE_FIRESTORE=true

// ƒê∆∞·ªùng d·∫´n file backup local
const feedbackPath = path.join(process.cwd(), "data/feedback.json");

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  try {
    const { question, answer, feedback, model } = req.body;
    const userIp = req.headers["x-forwarded-for"] || req.socket.remoteAddress;

    if (!feedback || typeof feedback !== "string") {
      return res.status(400).json({ error: "Thi·∫øu n·ªôi dung ph·∫£n h·ªìi." });
    }

    // --- T·∫°o object ph·∫£n h·ªìi chu·∫©n h√≥a ---
    const entry = {
      question: question || null,
      answer: answer || null,
      feedback: feedback.trim(),
      model: model || process.env.OPENAI_MODEL || "gpt-4o-mini",
      ip: userIp,
      timestamp: new Date().toISOString(),
    };

    // --- L∆∞u local (backup) ---
    try {
      fs.mkdirSync(path.dirname(feedbackPath), { recursive: true });

      // ƒê·ªçc file c≈© an to√†n (n·∫øu c√≥)
      let list = [];
      if (fs.existsSync(feedbackPath)) {
        const data = fs.readFileSync(feedbackPath, "utf-8");
        try {
          list = JSON.parse(data) || [];
        } catch {
          console.warn("[feedback] ‚ö†Ô∏è feedback.json l·ªói JSON, t·∫°o m·ªõi.");
        }
      }

      // Th√™m b·∫£n ghi m·ªõi
      list.push(entry);

      // Ghi file an to√†n (overwrite to√†n b·ªô list)
      fs.writeFileSync(feedbackPath, JSON.stringify(list, null, 2));
      console.log(`[feedback] üíæ L∆∞u local feedback (${userIp})`);
    } catch (err) {
      console.error("[feedback] ‚ùå L·ªói l∆∞u local:", err.message);
    }

    // --- L∆∞u Firestore n·∫øu c√≥ ---
    if (db) {
      try {
        await db.collection("feedbacks").add(entry);
        console.log("[feedback] ‚òÅÔ∏è L∆∞u feedback l√™n Firestore th√†nh c√¥ng.");
      } catch (err) {
        console.error("[feedback] ‚ö†Ô∏è L·ªói l∆∞u Firestore:", err.message);
      }
    }

    // --- Tr·∫£ ph·∫£n h·ªìi v·ªÅ client ---
    res
      .status(200)
      .json({ message: "‚úÖ C·∫£m ∆°n ph·∫£n h·ªìi c·ªßa b·∫°n üí¨", saved: true });
  } catch (err) {
    console.error("[feedback] üí• L·ªói ghi nh·∫≠n ph·∫£n h·ªìi:", err.message);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ l∆∞u ph·∫£n h·ªìi." });
  }
}

