// pages/api/ask.js
// ‚úÖ Main Endpoint: nh·∫≠n c√¢u h·ªèi, ki·ªÉm tra quota, g·ªçi AI pipeline
import { aiService } from "../../services/aiService.js";
import { rateLimitService } from "../../services/rateLimitService.js";
import { authService } from "../../services/authService.js";
import { dbService } from "../../services/dbService.js";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  const { question, uid } = req.body;
  const ipHeader = req.headers["x-forwarded-for"];
  const userIp = ipHeader ? ipHeader.split(",")[0].trim() : req.socket.remoteAddress;

  console.log("[api/ask] ‚ñ∂Ô∏è Handler called | uid:", uid, "| IP:", userIp);

  try {
    // 1Ô∏è‚É£ L·∫•y th√¥ng tin user n·∫øu c√≥ uid
    let userData = null;
    if (uid) {
      console.log("[api/ask] üîç Fetching user data from Firestore...");
      userData = await authService.getUser(uid);
    }

    // 2Ô∏è‚É£ Ki·ªÉm tra quota / rate-limit
    console.log("[api/ask] üö¶ Running rate limit check...");
    await rateLimitService.check(userIp, userData);
    console.log("[api/ask] ‚úÖ Rate limit OK, proceeding...");

    // 3Ô∏è‚É£ G·ªçi AI x·ª≠ l√Ω c√¢u h·ªèi
    const result = await aiService.processQuestion({ question, userIp, uid });
    console.log("[api/ask] üß† AI returned response:", result?.answer?.slice(0, 100));

    // 4Ô∏è‚É£ L∆∞u l·ªãch s·ª≠ v√†o Firestore (server-side, qua Admin SDK)
    await dbService.saveQA({
      question,
      answer: result.answer,
      embedding: result.embedding,
      userIp,
      uid,
    });

    // 5Ô∏è‚É£ Tr·∫£ k·∫øt qu·∫£ v·ªÅ client
    res.status(200).json(result);
    console.log("[api/ask] ‚úÖ Response sent successfully");
  } catch (err) {
    console.error("[api/ask] üí• Error:", err?.message || err);
    if (err.message === "limit_exceeded") {
      return res.status(429).json({
        error: "limit_exceeded",
        message:
          "B·∫°n ƒë√£ v∆∞·ª£t qu√° 3 c√¢u h·ªèi mi·ªÖn ph√≠ h√¥m nay. Vui l√≤ng ƒëƒÉng nh·∫≠p ho·∫∑c ƒë·ª£i ƒë·∫øn ng√†y mai.",
      });
    }
    res.status(500).json({
      error: "internal_error",
      message: err?.message || String(err),
    });
  }
}

