// services/aiService.js
// ‚úÖ Phi√™n b·∫£n ch√≠nh th·ª©c: x·ª≠ l√Ω song song Q&A + embedding + l∆∞u tr·ªØ song song
// ƒê√£ t√≠ch h·ª£p t·ªëi ∆∞u h√≥a hi·ªáu nƒÉng v√† rate-limit service

import { rateLimitService } from "./rateLimitService.js";
import { vectorService } from "./vectorService.js";
import { dbService } from "./dbService.js";
import { feedbackService } from "./feedbackService.js";
import { openai } from "../lib/openai.js";

// Kh·ªüi t·∫°o rateLimitService cache khi module ƒë∆∞·ª£c load (1 l·∫ßn duy nh·∫•t)
(async () => {
  try {
    console.log("[aiService] ‚öôÔ∏è Kh·ªüi t·∫°o rateLimitService...");
    await rateLimitService.init();
    console.log("[aiService] ‚úÖ rateLimitService cache initialized th√†nh c√¥ng");
  } catch (err) {
    console.error("[aiService] üí• L·ªói khi kh·ªüi t·∫°o rateLimitService:", err?.message || err);
  }
})();

export const aiService = {
  async processQuestion({ question, userIp, uid = null }) {
    const normalized = question?.trim()?.toLowerCase();
    if (!normalized) throw new Error("C√¢u h·ªèi tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá.");

    console.log(`\n[aiService] üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω c√¢u h·ªèi t·ª´ IP: ${userIp} | uid: ${uid}`);
    console.log(`[aiService] N·ªôi dung: "${normalized}"`);

    console.time('[aiService] total_time');

    try {
      // 1Ô∏è‚É£ Gi·ªõi h·∫°n (d√πng wrapper check ‚Äî m·∫∑c ƒë·ªãnh x·ª≠ l√Ω IP)
      await rateLimitService.check(userIp, null);
      console.log("[aiService] ‚úÖ Rate limit OK");

      // 2Ô∏è‚É£ Ki·ªÉm tra cache vector
      let similar = null;
      try {
        similar = await vectorService.findSimilar(normalized);
      } catch (err) {
        console.warn("[aiService] ‚ö†Ô∏è vectorService.findSimilar l·ªói:", err?.message || err);
      }

      if (similar) {
        console.log("[aiService] üß† T√¨m th·∫•y c√¢u t∆∞∆°ng t·ª± trong vector cache.");
        console.timeEnd('[aiService] total_time');
        return { ...similar, source: "vector-cache" };
      }

      // 3Ô∏è‚É£ G·ªçi OpenAI Q&A v√† t·∫°o embedding song song
      console.log("[aiService] üîÑ G·ªçi song song OpenAI Q&A + Embedding...");
      const [completion, embeddingRes] = await Promise.allSettled([
        openai.chat.completions.create({
          model: process.env.OPENAI_MODEL || "gpt-4o-mini",
          messages: [{ role: "user", content: normalized }],
        }),
        openai.embeddings.create({
          model: process.env.EMBEDDING_MODEL || "text-embedding-3-small",
          input: normalized,
        }),
      ]);

      // X·ª≠ l√Ω k·∫øt qu·∫£ Q&A
      let answer = "(Kh√¥ng c√≥ ph·∫£n h·ªìi)";
      if (completion.status === "fulfilled") {
        answer =
          completion.value?.choices?.[0]?.message?.content?.trim() ||
          "(Kh√¥ng c√≥ ph·∫£n h·ªìi)";
        console.log("[aiService] ‚úÖ Nh·∫≠n ph·∫£n h·ªìi t·ª´ OpenAI");
      } else {
        console.error(
          "[aiService] ‚ùå L·ªói g·ªçi OpenAI:",
          completion.reason?.message || completion.reason
        );
      }

      // X·ª≠ l√Ω k·∫øt qu·∫£ embedding
      let embedding = null;
      if (embeddingRes.status === "fulfilled") {
        embedding = embeddingRes.value?.data?.[0]?.embedding || null;
        console.log("[aiService] ‚úÖ Embedding t·∫°o th√†nh c√¥ng");
      } else {
        console.warn(
          "[aiService] ‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o embedding:",
          embeddingRes.reason?.message || embeddingRes.reason
        );
      }

      // 4Ô∏è‚É£ L∆∞u song song QA + vector embedding
      console.log("[aiService] üíæ L∆∞u d·ªØ li·ªáu song song (QA + embedding)");
      await Promise.allSettled([
        dbService.saveQA({ question: normalized, answer, embedding, userIp, uid }),
        vectorService.saveEmbedding(normalized, embedding),
      ]);

      console.timeEnd('[aiService] total_time');
      return { answer, source: "openai" };
    } catch (err) {
      console.error("[aiService] üí• Pipeline l·ªói:", err?.message || err);
      console.timeEnd('[aiService] total_time');
      throw err;
    }
  },
};

