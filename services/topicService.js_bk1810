// services/topicService.js
// ‚úÖ Gom nh√≥m c√¢u h·ªèi t∆∞∆°ng t·ª± th√†nh "Topic c·ªông ƒë·ªìng"
// H·ªó tr·ª£ Firestore + local fallback

import { db } from "../lib/firebase.js";
import fs from "fs/promises";
import path from "path";
import { vectorService } from "./vectorService.js";

const TOPIC_FILE = path.join(process.cwd(), "data/topics.json");
const SIMILARITY_THRESHOLD = parseFloat(process.env.TOPIC_SIMILARITY_THRESHOLD || "0.85");

export const topicService = {
  /**
   * üîπ L·∫•y danh s√°ch t·∫•t c·∫£ c√¢u h·ªèi t·ª´ Firestore ho·∫∑c local
   */
  async getAllQuestions() {
    try {
      if (!db) throw new Error("Firestore not initialized");
      const snap = await db.collection("questions").get();
      return snap.docs.map((d) => ({ id: d.id, ...d.data() }));
    } catch {
      console.warn("[topicService] ‚ö†Ô∏è Using local fallback for questions");
      const raw = await fs.readFile(path.join(process.cwd(), "data/qa.json"), "utf-8").catch(() => "{}");
      return Object.values(JSON.parse(raw || "{}"));
    }
  },

  /**
   * üîπ Gom nh√≥m c√¢u h·ªèi t∆∞∆°ng t·ª± (theo t·ª´ kho√° / mock similarity)
   */
  async buildWeeklyTopics() {
    console.log("[topicService] üß† Building weekly topics...");
    const all = await this.getAllQuestions();

    if (!all.length) {
      console.log("[topicService] ‚ö†Ô∏è No questions found, skip topic build.");
      return [];
    }

    const topics = [];
    const visited = new Set();

    for (let i = 0; i < all.length; i++) {
      if (visited.has(i)) continue;
      const q1 = all[i];
      const group = [q1];
      visited.add(i);

      for (let j = i + 1; j < all.length; j++) {
        if (visited.has(j)) continue;
        const q2 = all[j];

        // Mock similarity: t·ªâ l·ªá t·ª´ tr√πng
        const overlap = q1.question.split(" ").filter((w) => q2.question.includes(w)).length;
        const score = overlap / Math.max(q1.question.split(" ").length, 1);
        if (score >= SIMILARITY_THRESHOLD) {
          group.push(q2);
          visited.add(j);
        }
      }

      const title = group[0].question.slice(0, 50);
      topics.push({
        title,
        questionCount: group.length,
        samples: group.slice(0, 3).map((q) => q.question),
        createdAt: new Date().toISOString(),
      });
    }

    console.log(`[topicService] ‚úÖ Built ${topics.length} topics.`);

    await this.saveTopics(topics);
    return topics;
  },

  /**
   * üîπ L∆∞u topics ra Firestore v√† local
   */
  async saveTopics(topics) {
    try {
      if (db) {
        const col = db.collection("topics");
        for (const topic of topics) await col.add(topic);
        console.log("[topicService] ‚úÖ Topics saved to Firestore");
      }
    } catch (err) {
      console.warn("[topicService] ‚ö†Ô∏è Firestore save failed:", err.message);
    }

    try {
      await fs.writeFile(TOPIC_FILE, JSON.stringify(topics, null, 2), "utf-8");
      console.log("[topicService] üíæ Topics written locally");
    } catch (err) {
      console.warn("[topicService] ‚ö†Ô∏è Local save failed:", err.message);
    }
  },
};

